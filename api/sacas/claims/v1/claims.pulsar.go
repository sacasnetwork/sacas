// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package claimsv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Claim                  protoreflect.MessageDescriptor
	fd_Claim_action           protoreflect.FieldDescriptor
	fd_Claim_completed        protoreflect.FieldDescriptor
	fd_Claim_claimable_amount protoreflect.FieldDescriptor
)

func init() {
	file_sacas_claims_v1_claims_proto_init()
	md_Claim = File_sacas_claims_v1_claims_proto.Messages().ByName("Claim")
	fd_Claim_action = md_Claim.Fields().ByName("action")
	fd_Claim_completed = md_Claim.Fields().ByName("completed")
	fd_Claim_claimable_amount = md_Claim.Fields().ByName("claimable_amount")
}

var _ protoreflect.Message = (*fastReflection_Claim)(nil)

type fastReflection_Claim Claim

func (x *Claim) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Claim)(x)
}

func (x *Claim) slowProtoReflect() protoreflect.Message {
	mi := &file_sacas_claims_v1_claims_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Claim_messageType fastReflection_Claim_messageType
var _ protoreflect.MessageType = fastReflection_Claim_messageType{}

type fastReflection_Claim_messageType struct{}

func (x fastReflection_Claim_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Claim)(nil)
}
func (x fastReflection_Claim_messageType) New() protoreflect.Message {
	return new(fastReflection_Claim)
}
func (x fastReflection_Claim_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Claim
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Claim) Descriptor() protoreflect.MessageDescriptor {
	return md_Claim
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Claim) Type() protoreflect.MessageType {
	return _fastReflection_Claim_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Claim) New() protoreflect.Message {
	return new(fastReflection_Claim)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Claim) Interface() protoreflect.ProtoMessage {
	return (*Claim)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Claim) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Action != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Action))
		if !f(fd_Claim_action, value) {
			return
		}
	}
	if x.Completed != false {
		value := protoreflect.ValueOfBool(x.Completed)
		if !f(fd_Claim_completed, value) {
			return
		}
	}
	if x.ClaimableAmount != "" {
		value := protoreflect.ValueOfString(x.ClaimableAmount)
		if !f(fd_Claim_claimable_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Claim) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sacas.claims.v1.Claim.action":
		return x.Action != 0
	case "sacas.claims.v1.Claim.completed":
		return x.Completed != false
	case "sacas.claims.v1.Claim.claimable_amount":
		return x.ClaimableAmount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Claim) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sacas.claims.v1.Claim.action":
		x.Action = 0
	case "sacas.claims.v1.Claim.completed":
		x.Completed = false
	case "sacas.claims.v1.Claim.claimable_amount":
		x.ClaimableAmount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Claim) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sacas.claims.v1.Claim.action":
		value := x.Action
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sacas.claims.v1.Claim.completed":
		value := x.Completed
		return protoreflect.ValueOfBool(value)
	case "sacas.claims.v1.Claim.claimable_amount":
		value := x.ClaimableAmount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Claim) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sacas.claims.v1.Claim.action":
		x.Action = (Action)(value.Enum())
	case "sacas.claims.v1.Claim.completed":
		x.Completed = value.Bool()
	case "sacas.claims.v1.Claim.claimable_amount":
		x.ClaimableAmount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Claim) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.Claim.action":
		panic(fmt.Errorf("field action of message sacas.claims.v1.Claim is not mutable"))
	case "sacas.claims.v1.Claim.completed":
		panic(fmt.Errorf("field completed of message sacas.claims.v1.Claim is not mutable"))
	case "sacas.claims.v1.Claim.claimable_amount":
		panic(fmt.Errorf("field claimable_amount of message sacas.claims.v1.Claim is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Claim) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.Claim.action":
		return protoreflect.ValueOfEnum(0)
	case "sacas.claims.v1.Claim.completed":
		return protoreflect.ValueOfBool(false)
	case "sacas.claims.v1.Claim.claimable_amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.Claim"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.Claim does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Claim) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sacas.claims.v1.Claim", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Claim) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Claim) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Claim) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Claim) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Claim)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Action != 0 {
			n += 1 + runtime.Sov(uint64(x.Action))
		}
		if x.Completed {
			n += 2
		}
		l = len(x.ClaimableAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Claim)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ClaimableAmount) > 0 {
			i -= len(x.ClaimableAmount)
			copy(dAtA[i:], x.ClaimableAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ClaimableAmount)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Completed {
			i--
			if x.Completed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if x.Action != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Action))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Claim)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Claim: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
				}
				x.Action = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Action |= Action(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Completed = bool(v != 0)
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimableAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ClaimableAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ClaimsRecordAddress_3_list)(nil)

type _ClaimsRecordAddress_3_list struct {
	list *[]bool
}

func (x *_ClaimsRecordAddress_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimsRecordAddress_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBool((*x.list)[i])
}

func (x *_ClaimsRecordAddress_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ClaimsRecordAddress_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimsRecordAddress_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ClaimsRecordAddress at list field ActionsCompleted as it is not of Message kind"))
}

func (x *_ClaimsRecordAddress_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ClaimsRecordAddress_3_list) NewElement() protoreflect.Value {
	v := false
	return protoreflect.ValueOfBool(v)
}

func (x *_ClaimsRecordAddress_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ClaimsRecordAddress                          protoreflect.MessageDescriptor
	fd_ClaimsRecordAddress_address                  protoreflect.FieldDescriptor
	fd_ClaimsRecordAddress_initial_claimable_amount protoreflect.FieldDescriptor
	fd_ClaimsRecordAddress_actions_completed        protoreflect.FieldDescriptor
)

func init() {
	file_sacas_claims_v1_claims_proto_init()
	md_ClaimsRecordAddress = File_sacas_claims_v1_claims_proto.Messages().ByName("ClaimsRecordAddress")
	fd_ClaimsRecordAddress_address = md_ClaimsRecordAddress.Fields().ByName("address")
	fd_ClaimsRecordAddress_initial_claimable_amount = md_ClaimsRecordAddress.Fields().ByName("initial_claimable_amount")
	fd_ClaimsRecordAddress_actions_completed = md_ClaimsRecordAddress.Fields().ByName("actions_completed")
}

var _ protoreflect.Message = (*fastReflection_ClaimsRecordAddress)(nil)

type fastReflection_ClaimsRecordAddress ClaimsRecordAddress

func (x *ClaimsRecordAddress) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ClaimsRecordAddress)(x)
}

func (x *ClaimsRecordAddress) slowProtoReflect() protoreflect.Message {
	mi := &file_sacas_claims_v1_claims_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ClaimsRecordAddress_messageType fastReflection_ClaimsRecordAddress_messageType
var _ protoreflect.MessageType = fastReflection_ClaimsRecordAddress_messageType{}

type fastReflection_ClaimsRecordAddress_messageType struct{}

func (x fastReflection_ClaimsRecordAddress_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ClaimsRecordAddress)(nil)
}
func (x fastReflection_ClaimsRecordAddress_messageType) New() protoreflect.Message {
	return new(fastReflection_ClaimsRecordAddress)
}
func (x fastReflection_ClaimsRecordAddress_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimsRecordAddress
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ClaimsRecordAddress) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimsRecordAddress
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ClaimsRecordAddress) Type() protoreflect.MessageType {
	return _fastReflection_ClaimsRecordAddress_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ClaimsRecordAddress) New() protoreflect.Message {
	return new(fastReflection_ClaimsRecordAddress)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ClaimsRecordAddress) Interface() protoreflect.ProtoMessage {
	return (*ClaimsRecordAddress)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ClaimsRecordAddress) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_ClaimsRecordAddress_address, value) {
			return
		}
	}
	if x.InitialClaimableAmount != "" {
		value := protoreflect.ValueOfString(x.InitialClaimableAmount)
		if !f(fd_ClaimsRecordAddress_initial_claimable_amount, value) {
			return
		}
	}
	if len(x.ActionsCompleted) != 0 {
		value := protoreflect.ValueOfList(&_ClaimsRecordAddress_3_list{list: &x.ActionsCompleted})
		if !f(fd_ClaimsRecordAddress_actions_completed, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ClaimsRecordAddress) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		return x.Address != ""
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		return x.InitialClaimableAmount != ""
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		return len(x.ActionsCompleted) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecordAddress) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		x.Address = ""
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		x.InitialClaimableAmount = ""
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		x.ActionsCompleted = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ClaimsRecordAddress) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		value := x.InitialClaimableAmount
		return protoreflect.ValueOfString(value)
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		if len(x.ActionsCompleted) == 0 {
			return protoreflect.ValueOfList(&_ClaimsRecordAddress_3_list{})
		}
		listValue := &_ClaimsRecordAddress_3_list{list: &x.ActionsCompleted}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecordAddress) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		x.Address = value.Interface().(string)
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		x.InitialClaimableAmount = value.Interface().(string)
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		lv := value.List()
		clv := lv.(*_ClaimsRecordAddress_3_list)
		x.ActionsCompleted = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecordAddress) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		if x.ActionsCompleted == nil {
			x.ActionsCompleted = []bool{}
		}
		value := &_ClaimsRecordAddress_3_list{list: &x.ActionsCompleted}
		return protoreflect.ValueOfList(value)
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		panic(fmt.Errorf("field address of message sacas.claims.v1.ClaimsRecordAddress is not mutable"))
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		panic(fmt.Errorf("field initial_claimable_amount of message sacas.claims.v1.ClaimsRecordAddress is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ClaimsRecordAddress) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecordAddress.address":
		return protoreflect.ValueOfString("")
	case "sacas.claims.v1.ClaimsRecordAddress.initial_claimable_amount":
		return protoreflect.ValueOfString("")
	case "sacas.claims.v1.ClaimsRecordAddress.actions_completed":
		list := []bool{}
		return protoreflect.ValueOfList(&_ClaimsRecordAddress_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecordAddress"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecordAddress does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ClaimsRecordAddress) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sacas.claims.v1.ClaimsRecordAddress", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ClaimsRecordAddress) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecordAddress) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ClaimsRecordAddress) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ClaimsRecordAddress) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ClaimsRecordAddress)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InitialClaimableAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ActionsCompleted) > 0 {
			n += 1 + runtime.Sov(uint64(len(x.ActionsCompleted))) + len(x.ActionsCompleted)*1
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ClaimsRecordAddress)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ActionsCompleted) > 0 {
			for iNdEx := len(x.ActionsCompleted) - 1; iNdEx >= 0; iNdEx-- {
				i--
				if x.ActionsCompleted[iNdEx] {
					dAtA[i] = 1
				} else {
					dAtA[i] = 0
				}
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ActionsCompleted)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.InitialClaimableAmount) > 0 {
			i -= len(x.InitialClaimableAmount)
			copy(dAtA[i:], x.InitialClaimableAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitialClaimableAmount)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ClaimsRecordAddress)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimsRecordAddress: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimsRecordAddress: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialClaimableAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitialClaimableAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType == 0 {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ActionsCompleted = append(x.ActionsCompleted, bool(v != 0))
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					elementCount = packedLen
					if elementCount != 0 && len(x.ActionsCompleted) == 0 {
						x.ActionsCompleted = make([]bool, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ActionsCompleted = append(x.ActionsCompleted, bool(v != 0))
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActionsCompleted", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ClaimsRecord_2_list)(nil)

type _ClaimsRecord_2_list struct {
	list *[]bool
}

func (x *_ClaimsRecord_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ClaimsRecord_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBool((*x.list)[i])
}

func (x *_ClaimsRecord_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ClaimsRecord_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ClaimsRecord_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ClaimsRecord at list field ActionsCompleted as it is not of Message kind"))
}

func (x *_ClaimsRecord_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ClaimsRecord_2_list) NewElement() protoreflect.Value {
	v := false
	return protoreflect.ValueOfBool(v)
}

func (x *_ClaimsRecord_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ClaimsRecord                          protoreflect.MessageDescriptor
	fd_ClaimsRecord_initial_claimable_amount protoreflect.FieldDescriptor
	fd_ClaimsRecord_actions_completed        protoreflect.FieldDescriptor
)

func init() {
	file_sacas_claims_v1_claims_proto_init()
	md_ClaimsRecord = File_sacas_claims_v1_claims_proto.Messages().ByName("ClaimsRecord")
	fd_ClaimsRecord_initial_claimable_amount = md_ClaimsRecord.Fields().ByName("initial_claimable_amount")
	fd_ClaimsRecord_actions_completed = md_ClaimsRecord.Fields().ByName("actions_completed")
}

var _ protoreflect.Message = (*fastReflection_ClaimsRecord)(nil)

type fastReflection_ClaimsRecord ClaimsRecord

func (x *ClaimsRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ClaimsRecord)(x)
}

func (x *ClaimsRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_sacas_claims_v1_claims_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ClaimsRecord_messageType fastReflection_ClaimsRecord_messageType
var _ protoreflect.MessageType = fastReflection_ClaimsRecord_messageType{}

type fastReflection_ClaimsRecord_messageType struct{}

func (x fastReflection_ClaimsRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ClaimsRecord)(nil)
}
func (x fastReflection_ClaimsRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_ClaimsRecord)
}
func (x fastReflection_ClaimsRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimsRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ClaimsRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_ClaimsRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ClaimsRecord) Type() protoreflect.MessageType {
	return _fastReflection_ClaimsRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ClaimsRecord) New() protoreflect.Message {
	return new(fastReflection_ClaimsRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ClaimsRecord) Interface() protoreflect.ProtoMessage {
	return (*ClaimsRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ClaimsRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.InitialClaimableAmount != "" {
		value := protoreflect.ValueOfString(x.InitialClaimableAmount)
		if !f(fd_ClaimsRecord_initial_claimable_amount, value) {
			return
		}
	}
	if len(x.ActionsCompleted) != 0 {
		value := protoreflect.ValueOfList(&_ClaimsRecord_2_list{list: &x.ActionsCompleted})
		if !f(fd_ClaimsRecord_actions_completed, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ClaimsRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		return x.InitialClaimableAmount != ""
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		return len(x.ActionsCompleted) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		x.InitialClaimableAmount = ""
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		x.ActionsCompleted = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ClaimsRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		value := x.InitialClaimableAmount
		return protoreflect.ValueOfString(value)
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		if len(x.ActionsCompleted) == 0 {
			return protoreflect.ValueOfList(&_ClaimsRecord_2_list{})
		}
		listValue := &_ClaimsRecord_2_list{list: &x.ActionsCompleted}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		x.InitialClaimableAmount = value.Interface().(string)
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		lv := value.List()
		clv := lv.(*_ClaimsRecord_2_list)
		x.ActionsCompleted = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		if x.ActionsCompleted == nil {
			x.ActionsCompleted = []bool{}
		}
		value := &_ClaimsRecord_2_list{list: &x.ActionsCompleted}
		return protoreflect.ValueOfList(value)
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		panic(fmt.Errorf("field initial_claimable_amount of message sacas.claims.v1.ClaimsRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ClaimsRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sacas.claims.v1.ClaimsRecord.initial_claimable_amount":
		return protoreflect.ValueOfString("")
	case "sacas.claims.v1.ClaimsRecord.actions_completed":
		list := []bool{}
		return protoreflect.ValueOfList(&_ClaimsRecord_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sacas.claims.v1.ClaimsRecord"))
		}
		panic(fmt.Errorf("message sacas.claims.v1.ClaimsRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ClaimsRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sacas.claims.v1.ClaimsRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ClaimsRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ClaimsRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ClaimsRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ClaimsRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ClaimsRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.InitialClaimableAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ActionsCompleted) > 0 {
			n += 1 + runtime.Sov(uint64(len(x.ActionsCompleted))) + len(x.ActionsCompleted)*1
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ClaimsRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ActionsCompleted) > 0 {
			for iNdEx := len(x.ActionsCompleted) - 1; iNdEx >= 0; iNdEx-- {
				i--
				if x.ActionsCompleted[iNdEx] {
					dAtA[i] = 1
				} else {
					dAtA[i] = 0
				}
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ActionsCompleted)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.InitialClaimableAmount) > 0 {
			i -= len(x.InitialClaimableAmount)
			copy(dAtA[i:], x.InitialClaimableAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitialClaimableAmount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ClaimsRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimsRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ClaimsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialClaimableAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitialClaimableAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType == 0 {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ActionsCompleted = append(x.ActionsCompleted, bool(v != 0))
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					elementCount = packedLen
					if elementCount != 0 && len(x.ActionsCompleted) == 0 {
						x.ActionsCompleted = make([]bool, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ActionsCompleted = append(x.ActionsCompleted, bool(v != 0))
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActionsCompleted", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/sacas/sacas/blob/main/LICENSE)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sacas/claims/v1/claims.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action defines the list of available actions to claim the airdrop tokens.
type Action int32

const (
	// ACTION_UNSPECIFIED defines an invalid action.
	Action_ACTION_UNSPECIFIED Action = 0
	// ACTION_VOTE defines a proposal vote.
	Action_ACTION_VOTE Action = 1
	// ACTION_DELEGATE defines an staking delegation.
	Action_ACTION_DELEGATE Action = 2
	// ACTION_EVM defines an EVM transaction.
	Action_ACTION_EVM Action = 3
	// ACTION_IBC_TRANSFER defines a fungible token transfer transaction via IBC.
	Action_ACTION_IBC_TRANSFER Action = 4
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_VOTE",
		2: "ACTION_DELEGATE",
		3: "ACTION_EVM",
		4: "ACTION_IBC_TRANSFER",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":  0,
		"ACTION_VOTE":         1,
		"ACTION_DELEGATE":     2,
		"ACTION_EVM":          3,
		"ACTION_IBC_TRANSFER": 4,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sacas_claims_v1_claims_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_sacas_claims_v1_claims_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_sacas_claims_v1_claims_proto_rawDescGZIP(), []int{0}
}

// Claim defines the action, completed flag and the remaining claimable amount
// for a given user. This is only used during client queries.
type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action enum
	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=sacas.claims.v1.Action" json:"action,omitempty"`
	// completed is true if the action has been completed
	Completed bool `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// claimable_amount of tokens for the action. Zero if completed
	ClaimableAmount string `protobuf:"bytes,3,opt,name=claimable_amount,json=claimableAmount,proto3" json:"claimable_amount,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sacas_claims_v1_claims_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_sacas_claims_v1_claims_proto_rawDescGZIP(), []int{0}
}

func (x *Claim) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *Claim) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *Claim) GetClaimableAmount() string {
	if x != nil {
		return x.ClaimableAmount
	}
	return ""
}

// ClaimsRecordAddress is the claims metadata per address that is used at
// Genesis.
type ClaimsRecordAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address of claiming user in either bech32 or hex format
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// initial_claimable_amount for the user
	InitialClaimableAmount string `protobuf:"bytes,2,opt,name=initial_claimable_amount,json=initialClaimableAmount,proto3" json:"initial_claimable_amount,omitempty"`
	// actions_completed is a slice that describes which actions were completed
	ActionsCompleted []bool `protobuf:"varint,3,rep,packed,name=actions_completed,json=actionsCompleted,proto3" json:"actions_completed,omitempty"`
}

func (x *ClaimsRecordAddress) Reset() {
	*x = ClaimsRecordAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sacas_claims_v1_claims_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsRecordAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsRecordAddress) ProtoMessage() {}

// Deprecated: Use ClaimsRecordAddress.ProtoReflect.Descriptor instead.
func (*ClaimsRecordAddress) Descriptor() ([]byte, []int) {
	return file_sacas_claims_v1_claims_proto_rawDescGZIP(), []int{1}
}

func (x *ClaimsRecordAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ClaimsRecordAddress) GetInitialClaimableAmount() string {
	if x != nil {
		return x.InitialClaimableAmount
	}
	return ""
}

func (x *ClaimsRecordAddress) GetActionsCompleted() []bool {
	if x != nil {
		return x.ActionsCompleted
	}
	return nil
}

// ClaimsRecord defines the initial claimable airdrop amount and the list of
// completed actions to claim the tokens.
type ClaimsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial_claimable_amount for the user
	InitialClaimableAmount string `protobuf:"bytes,1,opt,name=initial_claimable_amount,json=initialClaimableAmount,proto3" json:"initial_claimable_amount,omitempty"`
	// actions_completed is a slice that describes which actions were completed
	ActionsCompleted []bool `protobuf:"varint,2,rep,packed,name=actions_completed,json=actionsCompleted,proto3" json:"actions_completed,omitempty"`
}

func (x *ClaimsRecord) Reset() {
	*x = ClaimsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sacas_claims_v1_claims_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimsRecord) ProtoMessage() {}

// Deprecated: Use ClaimsRecord.ProtoReflect.Descriptor instead.
func (*ClaimsRecord) Descriptor() ([]byte, []int) {
	return file_sacas_claims_v1_claims_proto_rawDescGZIP(), []int{2}
}

func (x *ClaimsRecord) GetInitialClaimableAmount() string {
	if x != nil {
		return x.InitialClaimableAmount
	}
	return ""
}

func (x *ClaimsRecord) GetActionsCompleted() []bool {
	if x != nil {
		return x.ActionsCompleted
	}
	return nil
}

var File_sacas_claims_v1_claims_proto protoreflect.FileDescriptor

var file_sacas_claims_v1_claims_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x61, 0x63, 0x61, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x73, 0x61, 0x63, 0x61, 0x73, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x61, 0x63, 0x61, 0x73, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x59,
	0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x18, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x68, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2a, 0xd6, 0x01, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x15, 0x8a,
	0x9d, 0x20, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x4f, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x4d, 0x10, 0x03, 0x1a, 0x0d,
	0x8a, 0x9d, 0x20, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x56, 0x4d, 0x12, 0x2e, 0x0a,
	0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x42, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x15, 0x8a, 0x9d, 0x20, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x42, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x42, 0xab, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x63, 0x61,
	0x73, 0x2e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x63,
	0x61, 0x73, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x61,
	0x63, 0x61, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f,
	0x53, 0x61, 0x63, 0x61, 0x73, 0x5c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1b, 0x53, 0x61, 0x63, 0x61, 0x73, 0x5c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x53, 0x61, 0x63, 0x61, 0x73, 0x3a, 0x3a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sacas_claims_v1_claims_proto_rawDescOnce sync.Once
	file_sacas_claims_v1_claims_proto_rawDescData = file_sacas_claims_v1_claims_proto_rawDesc
)

func file_sacas_claims_v1_claims_proto_rawDescGZIP() []byte {
	file_sacas_claims_v1_claims_proto_rawDescOnce.Do(func() {
		file_sacas_claims_v1_claims_proto_rawDescData = protoimpl.X.CompressGZIP(file_sacas_claims_v1_claims_proto_rawDescData)
	})
	return file_sacas_claims_v1_claims_proto_rawDescData
}

var file_sacas_claims_v1_claims_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sacas_claims_v1_claims_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sacas_claims_v1_claims_proto_goTypes = []interface{}{
	(Action)(0),                 // 0: sacas.claims.v1.Action
	(*Claim)(nil),               // 1: sacas.claims.v1.Claim
	(*ClaimsRecordAddress)(nil), // 2: sacas.claims.v1.ClaimsRecordAddress
	(*ClaimsRecord)(nil),        // 3: sacas.claims.v1.ClaimsRecord
}
var file_sacas_claims_v1_claims_proto_depIdxs = []int32{
	0, // 0: sacas.claims.v1.Claim.action:type_name -> sacas.claims.v1.Action
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sacas_claims_v1_claims_proto_init() }
func file_sacas_claims_v1_claims_proto_init() {
	if File_sacas_claims_v1_claims_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sacas_claims_v1_claims_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sacas_claims_v1_claims_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimsRecordAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sacas_claims_v1_claims_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sacas_claims_v1_claims_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sacas_claims_v1_claims_proto_goTypes,
		DependencyIndexes: file_sacas_claims_v1_claims_proto_depIdxs,
		EnumInfos:         file_sacas_claims_v1_claims_proto_enumTypes,
		MessageInfos:      file_sacas_claims_v1_claims_proto_msgTypes,
	}.Build()
	File_sacas_claims_v1_claims_proto = out.File
	file_sacas_claims_v1_claims_proto_rawDesc = nil
	file_sacas_claims_v1_claims_proto_goTypes = nil
	file_sacas_claims_v1_claims_proto_depIdxs = nil
}
