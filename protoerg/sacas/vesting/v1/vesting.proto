

  ];
  ];
  }
  // all the necessary fields needed for any vesting account implementation
  (amino.dont_omitempty) = true, (amino.dont_omitempty) = true,
  // an account that can hold contributions subject to "lockup" (like a
  // base_vesting_account implements the VestingAccount interface. It contains
  // ClawbackVestingAccount implements the VestingAccount interface. It provides
  // Copyright Tharsis Labs Ltd.(Sacas)
      cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [(gogoproto.embed) = true];
  // funder_address specifies the account which can perform clawback
  "github.com/cosmos/cosmos-sdk/x/auth/vesting/types.Periods"(gogoproto.nullable) = false,
  (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/x/auth/vesting/types.Periods"(gogoproto.castrepeated) =
      (gogoproto.nullable) = false,
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  google.protobuf.Timestamp start_time = 3 import "amino/amino.proto";
import "cosmos/vesting/v1beta1/vesting.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
  // lockup_periods defines the unlocking schedule relative to the start_time
  message ClawbackVestingAccount {
    // of unvested tokens, or a combination (tokens vest, but are still locked).
    option (amino.name) = "sacas/x/vesting/v1/ClawbackVestingAccount";
    option (gogoproto.goproto_getters) = false;
    option (gogoproto.goproto_stringer) = false;
    option go_package = "github.com/sacasnetwork/sacas/v1/x/vesting/migrations/types";
    package sacas.vesting.v1;
    // PeriodicVestingAccount), or vesting which is subject to clawback
  repeated cosmos.vesting.v1beta1.Period lockup_periods = 4 [
  repeated cosmos.vesting.v1beta1.Period vesting_periods = 5 [
// SPDX-License-Identifier:ENCL-1.0(SacasINC)
  // start_time defines the time at which the vesting period begins
  string funder_address = 2;
syntax = "proto3";
  // vesting_periods defines the vesting schedule relative to the start_time
