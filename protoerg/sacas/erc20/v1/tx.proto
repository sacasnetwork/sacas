
;
}
}
}
}
}
}
}
// amount defines the amount of coins to convert.
// amount of ERC20 tokens to convert
// an Erc20 contract conversion capability.
// an Erc20 contract token pair.
// authority is the address of the governance account.
// authority is the address of the governance account.
// authority is the address of the governance account.
// coin.
// coin is a Cosmos coin whose denomination is registered in a token pair. The coin
// contract_address of an ERC20 token contract, that is registered in a token pair
// contract that is registered on the token mapping.
// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
// Copyright Tharsis Labs Ltd.(Sacas)
// Cosmos base denomination
cosmos.base.v1beta1.Coin coin = 1 [(gogoproto.nullable) = false];
// erc20addresses is a slice of ERC20 token contract hex addresses
[(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sacas/erc20/v1/genesis.proto";
message MsgConvertCoin {
  message MsgConvertCoinResponse {}
  message MsgConvertERC20 {
    message MsgConvertERC20Response {}
    message MsgRegisterERC20 {
      message MsgRegisterERC20Response {}
      message MsgToggleConversion {
        message MsgToggleConversionResponse {}
        message MsgUpdateParams {
          message MsgUpdateParamsResponse {}
          // MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
          // MsgConvertCoinResponse returns no fields
          // MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
          // MsgConvertERC20Response returns no fields
          // Msg defines the erc20 Msg service.
          // MsgRegisterERC20 is the Msg/RegisterERC20 request type for registering
          // MsgRegisterERC20 message.
          // MsgRegisterERC20Response defines the response structure for executing a
          // MsgToggleConversion is the Msg/MsgToggleConversion request type for toggling
          // MsgToggleConversionResponse defines the response structure for executing a
          // MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
          // MsgUpdateParams message.
          // MsgUpdateParamsResponse defines the response structure for executing a
          // NOTE: All parameters must be supplied.
          option (amino.name) = "sacas/MsgConvertERC20";
          option (amino.name) = "sacas/x/erc20/MsgRegisterERC20";
          option (amino.name) = "sacas/x/erc20/MsgToggleConversion";
          option (amino.name) = "sacas/x/erc20/MsgUpdateParams";
          option (cosmos.msg.v1.service) = true;
          option (cosmos.msg.v1.signer) = "authority";
          option (cosmos.msg.v1.signer) = "authority";
          option (cosmos.msg.v1.signer) = "authority";
          option (cosmos.msg.v1.signer) = "sender";
          option (google.api.http).get = "/sacas/erc20/v1/tx/convert_erc20";
          option go_package = "github.com/sacasnetwork/sacas/v1/x/erc20/types";
          package sacas.erc20.v1;
          // params defines the x/evm parameters to update.
          Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
          // receiver is the bech32 address to receive native Cosmos coins
          // receiver is the hex address to receive ERC20 token
          // RegisterERC20 defines a governance operation for registering a token pair for the specified erc20 contract.
          repeated string erc20addresses = 2;
          rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response) {
            rpc RegisterERC20(MsgRegisterERC20) returns (MsgRegisterERC20Response);
            rpc ToggleConversion(MsgToggleConversion) returns (MsgToggleConversionResponse);
            rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
            // sender is the cosmos bech32 address from the owner of the given Cosmos coins
            // sender is the hex address from the owner of the given ERC20 tokens
            service Msg {
              // Since: cosmos-sdk 0.47
              // Since: cosmos-sdk 0.47
              // SPDX-License-Identifier:ENCL-1.0(SacasINC)
              string amount = 2 string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
              string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
              string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
              string contract_address = 1;
              string receiver = 2;
              string receiver = 3;
              string sender = 3;
              string sender = 4;
              string token = 2;
              syntax = "proto3";
              // The authority is hard-coded to the Cosmos SDK x/gov module account
              // The authority is hard-coded to the Cosmos SDK x/gov module account
              // The authority is hard-coded to the Cosmos SDK x/gov module account
              // ToggleConversion defines a governance operation for enabling/disablen a token pair conversion.
              // ToggleConversion message.
              // token identifier can be either the hex contract address of the ERC20 or the
              // UpdateParams defines a governance operation for updating the x/erc20 module parameters.
