

;
  ];
  ];
  ];
  ];
  }
  }
  }
  }
  }
  }
  }
  }
  }
  // accesses is an array of access tuples
  // accesses is an array of access tuples
  // AccessListTx is the data of EIP-2930 access list transactions.
  // against the address derived from the signature (V, R, S) using the
  // AllowUnprotectedTxs parameter is disabled.
  (amino.dont_omitempty) = true(amino.dont_omitempty) = true
      // authority is the address of the governance account.
      bytes data = 6;
  bytes data = 7;
  bytes data = 8;
  bytes r = 10;
  bytes r = 11;
  bytes r = 8;
  bytes ret = 3;
  bytes s = 11;
  bytes s = 12;
  bytes s = 9;
  bytes v = 10;
  bytes v = 7;
  bytes v = 9;
  // chain_id of the destination EVM chain
  // chain_id of the destination EVM chain
  // Copyright Tharsis Labs Ltd.(Sacas)
  // data is inner transaction data of the Ethereum transaction
  // data is the data payload bytes of the transaction.
  // data is the data payload bytes of the transaction.
  // data is the data payload bytes of the transaction.
  double size = 2 [(gogoproto.jsontag) = "-", (amino.dont_omitempty) = true];
  // DynamicFeeTx is the data of EIP-1559 dynamic fee transactions.
  // EthereumTx defines a method submitting Ethereum transactions.
  // ExtensionOptionsEthereumTx is an extension option for ethereum transactions
  // from is the ethereum signer address in hex format. This address value is checked
  // gas defines the gas limit defined for the transaction.
  // gas defines the gas limit defined for the transaction.
  // gas defines the gas limit defined for the transaction.
  // gas_fee_cap defines the max value for the gas fee
  // gas_price defines the value for each gas unit
  // gas_price defines the value for each gas unit
  // gas_tip_cap defines the max value for the gas tip
  // gas_used specifies how much gas was consumed by the transaction
  (gogoproto.castrepeated) = "AccessList", (gogoproto.castrepeated) = "AccessList", (gogoproto.customname) = "ChainID",
  (gogoproto.customname) = "ChainID", (gogoproto.customtype) = "cosmossdk.io/math.Int",
  (gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.jsontag) = "accessList",
  (gogoproto.jsontag) = "accessList",
  (gogoproto.jsontag) = "chainID"(gogoproto.jsontag) = "chainID"(gogoproto.nullable) = false,
  (gogoproto.nullable) = false, google.protobuf.Any data = 1;
  // hash of the ethereum transaction in hex format. This hash differs from the
  // hash of the transaction in hex format
  // https://github.com/tendermint/tendermint/issues/6539 for reference
import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "ethermint/evm/v1/evm.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
  // LegacyTx is the transaction data of regular Ethereum transactions.
  // logs.
  // logs contains the transaction hash and the proto-compatible ethereum
  message AccessListTx {
    message DynamicFeeTx {
      message ExtensionOptionsEthereumTx {
        message LegacyTx {
          message MsgEthereumTx {
            message MsgEthereumTxResponse {
              message MsgUpdateParams {
                message MsgUpdateParamsResponse {}
                // Msg defines the evm Msg service.
                // MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
                // MsgEthereumTxResponse defines the Msg/EthereumTx response type.
                // MsgUpdateParams defines a Msg for updating the x/evm module parameters.
                // MsgUpdateParams message.
                // MsgUpdateParamsResponse defines the response structure for executing a
                // nonce corresponds to the account nonce (transaction sequence).
                // nonce corresponds to the account nonce (transaction sequence).
                // nonce corresponds to the account nonce (transaction sequence).
                // NOTE: All non-protected transactions (i.e non EIP155 signed) will fail if the
                // NOTE: All parameters must be supplied.
                // opcode)
                option (amino.name) = "ethermint/AccessListTx";
                option (amino.name) = "ethermint/DynamicFeeTx";
                option (amino.name) = "ethermint/LegacyTx";
                option (amino.name) = "ethermint/MsgEthereumTx";
                option (amino.name) = "sacas/x/evm/MsgUpdateParams";
                option (cosmos.msg.v1.service) = true;
                option (cosmos.msg.v1.signer) = "authority";
                option (cosmos_proto.implements_interface) = "TxData";
                option (cosmos_proto.implements_interface) = "TxData";
                option (cosmos_proto.implements_interface) = "TxData";
                option (gogoproto.goproto_getters) = false;
                option (gogoproto.goproto_getters) = false;
                option (gogoproto.goproto_getters) = false;
                option (gogoproto.goproto_getters) = false;
                option (gogoproto.goproto_getters) = false;
                option (gogoproto.goproto_getters) = false;
                option (google.api.http).post = "/sacas/evm/v1/ethereum_tx";
                option go_package = "github.com/sacasnetwork/sacas/v1/x/evm/types";
                package ethermint.evm.v1;
                // params defines the x/evm parameters to update.
                Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
                // r defines the signature value
                // r defines the signature value
                // r defines the signature value
  repeated AccessTuple accesses = 8 [
  repeated AccessTuple accesses = 9 [
  repeated Log logs = 2;
  // ret is the returned data from evm function (result or data supplied with revert
  rpc EthereumTx(MsgEthereumTx) returns (MsgEthereumTxResponse) {
                rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
                // s define the signature value
                // s define the signature value
                // s define the signature value
                // secp256k1 elliptic curve
                service Msg {
                  // size is the encoded storage size of the transaction (DEPRECATED)
                  // SPDX-License-Identifier:ENCL-1.0(SacasINC)
                  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string chain_id = 1 [
  string chain_id = 1 [
  string from = 4;
  string gas_fee_cap = 4 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  string gas_price = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  string gas_price = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  string gas_tip_cap = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  string hash = 1;
  string hash = 3 [(gogoproto.moretags) = "rlp:\"-\"", (amino.dont_omitempty) = true];
  string to = 4;
  string to = 5;
  string to = 6;
  string value = 5 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.customname) = "Amount"];
  string value = 6 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.customname) = "Amount"];
  string value = 7 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.customname) = "Amount"];
  string vm_error = 4;
syntax = "proto3";
  // Tendermint sha256 hash of the transaction bytes. See
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  // to is the hex formatted address of the recipient
  // to is the hex formatted address of the recipient
  // to is the recipient address in hex format
  uint64 gas = 3 [(gogoproto.customname) = "GasLimit"];
  uint64 gas = 4 [(gogoproto.customname) = "GasLimit"];
  uint64 gas = 5 [(gogoproto.customname) = "GasLimit"];
  uint64 gas_used = 5;
  uint64 nonce = 1;
  uint64 nonce = 2;
  uint64 nonce = 2;
  // UpdateParams defined a governance operation for updating the x/evm module parameters.
  // value defines the transaction amount.
  // value defines the unsigned integer value of the transaction amount.
  // value defines the unsigned integer value of the transaction amount.
  // v defines the signature value
  // v defines the signature value
  // v defines the signature value
  // vm_error is the error returned by vm execution
